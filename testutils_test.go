package youyouayedee

import (
	"reflect"
	"testing"
)

// UTC time:
//      2022-01-01T00:00:00Z
//
// Unix timestamp, as seconds:
//       1 640 995 200
//
// Unix timestamp, as millseconds:
//          1 640 995 200
//     ×            1 000 milliseconds per second
//      =================
//      1 640 995 200 000
//
// In hex, 48 bits:
//      01 7e 12 ef 9c 00
//
// Actual seconds since Unix epoch, 1970-01-01T00:00:00Z:
//      1 640 995 200
//    +            28 leap seconds
//      =============
//      1 640 995 228
//
// Actual seconds since UUID epoch, 1582-10-15T00:00:00Z:
//       1 640 995 228
//    + 12 219 292 800 delta seconds
//      ==============
//      13 860 288 028
//
// UUID timestamp, as hectonanoseconds:
//               13 860 288 028
//   ×               10 000 000 hectonanoseconds per second
//      =======================
//      138 602 880 280 000 000
//
// In hex, 64 bits:
//      01 ec 6a 95 d3 ef 76 00

var (
	uuidV1AllZero = UUID{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	uuidV1        = UUID{0xd3, 0xef, 0x76, 0x00, 0x6a, 0x95, 0x11, 0xec, 0x92, 0x34, 0x23, 0x58, 0x84, 0x0c, 0x40, 0xe6}
	uuidV2        = UUID{0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x20, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	uuidV3        = UUID{0x8f, 0xbe, 0x4c, 0xf3, 0x9a, 0x53, 0x3a, 0x4f, 0xae, 0x1e, 0xa5, 0x87, 0x07, 0xfc, 0x4f, 0x4c}
	uuidV4        = UUID{0x90, 0x92, 0x58, 0x36, 0xe1, 0x23, 0x43, 0xf4, 0x8e, 0x5e, 0x64, 0x08, 0x6c, 0x46, 0xa7, 0xb6}
	uuidV5        = UUID{0xed, 0x81, 0xd1, 0xce, 0xb5, 0x5f, 0x58, 0xcc, 0xa2, 0xa4, 0xd5, 0xcf, 0x9b, 0x57, 0x88, 0x8f}
	uuidV6        = UUID{0x1e, 0xc6, 0xa9, 0x5d, 0x3e, 0xf7, 0x66, 0x00, 0x92, 0x34, 0x23, 0x58, 0x84, 0x0c, 0x40, 0xe6}
	uuidV7A       = UUID{0x01, 0x7e, 0x12, 0xf0, 0x09, 0x60, 0x70, 0x00, 0x80, 0x12, 0x34, 0x0a, 0x00, 0x1d, 0x33, 0x16}
	uuidV7B       = UUID{0x01, 0x7e, 0x12, 0xef, 0x9c, 0x00, 0x70, 0x00, 0x80, 0x12, 0x34, 0x0a, 0x00, 0x1d, 0x33, 0x16}
	uuidV7C       = UUID{0x01, 0x7e, 0x12, 0xf0, 0x09, 0x60, 0x70, 0x00, 0x80, 0x12, 0x34, 0xb9, 0xd4, 0x0e, 0xd8, 0x81}
	uuidV7D       = UUID{0x01, 0x7e, 0x12, 0xef, 0x9c, 0x00, 0x70, 0x00, 0x80, 0x12, 0x34, 0xb9, 0xd4, 0x0e, 0xd8, 0x81}
	uuidV8FromV1  = UUID{0xd3, 0xef, 0x76, 0x00, 0x6a, 0x95, 0x81, 0xec, 0x92, 0x34, 0x23, 0x58, 0x84, 0x0c, 0x40, 0xe6}
	uuidV8FromV2  = UUID{0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	uuidV8FromV3  = UUID{0x8f, 0xbe, 0x4c, 0xf3, 0x9a, 0x53, 0x8a, 0x4f, 0xae, 0x1e, 0xa5, 0x87, 0x07, 0xfc, 0x4f, 0x4c}
	uuidV8FromV4  = UUID{0x90, 0x92, 0x58, 0x36, 0xe1, 0x23, 0x83, 0xf4, 0x8e, 0x5e, 0x64, 0x08, 0x6c, 0x46, 0xa7, 0xb6}
	uuidV8FromV5  = UUID{0xed, 0x81, 0xd1, 0xce, 0xb5, 0x5f, 0x88, 0xcc, 0xa2, 0xa4, 0xd5, 0xcf, 0x9b, 0x57, 0x88, 0x8f}
	uuidV8FromV6  = UUID{0x1e, 0xc6, 0xa9, 0x5d, 0x3e, 0xf7, 0x86, 0x00, 0x92, 0x34, 0x23, 0x58, 0x84, 0x0c, 0x40, 0xe6}
	uuidV8FromV7A = UUID{0x01, 0x7e, 0x12, 0xf0, 0x09, 0x60, 0x80, 0x00, 0x80, 0x12, 0x34, 0x0a, 0x00, 0x1d, 0x33, 0x16}
	uuidInvalid   = UUID{0xd3, 0xef, 0x76, 0x00, 0x6a, 0x95, 0x11, 0xec, 0xd2, 0x34, 0x23, 0x58, 0x84, 0x0c, 0x40, 0xe6}

	strEmpty           = []byte("")
	strNull            = []byte("null")
	strNil             = []byte("nil")
	strMax             = []byte("max")
	binV1AllZero       = []byte(uuidV1AllZero[:])
	strV1AllZeroNoDash = []byte("00000000000010008000000000000000")
	strV1AllZeroDash   = []byte("00000000-0000-1000-8000-000000000000")
	strV1AllZeroBrace  = []byte("{00000000-0000-1000-8000-000000000000}")
	strV1AllZeroURN    = []byte("urn:uuid:00000000-0000-1000-8000-000000000000")
	str1X              = []byte("x")
	str3X              = []byte("xxx")
	str4X              = []byte("xxxx")
	str31              = []byte("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
	str33              = []byte("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
	str35              = []byte("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
	str37              = []byte("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx")
	strG               = []byte("0g000000-0000-1000-8000-000000000000")
	strColon           = []byte("00000000:0000:1000:8000:000000000000")
	strVarC0           = []byte("00000000-0000-1000-c000-000000000000")

	lscDummy LeapSecondCalculator = LeapSecondCalculatorDummy{}
	lscFixed LeapSecondCalculator = LeapSecondCalculatorFixed{}
)

func compare[V comparable](t *testing.T, name string, expect V, actual V) {
	t.Helper()

	if actual == expect {
		return
	}

	t.Errorf("%s: wrong value\n\texpect: %#v\n\tactual: %#v", name, expect, actual)
}

func compareError(t *testing.T, name string, expect error, actual error) {
	t.Helper()

	var message string
	switch {
	case expect == nil && actual == nil:
		return

	case expect == nil:
		message = "failed unexpectedly"

	case actual == nil:
		message = "succeeded unexpectedly"

	case reflect.DeepEqual(expect, actual):
		return

	default:
		message = "failed as expected, but with wrong error"
	}

	t.Errorf("%s: %s\n\texpect: %#v\n\tactual: %#v", name, message, expect, actual)
}
